#include "declaration.nddl"

enum ResultStatus {
	UNDEFINED, //Used when the action becomes inactive in an undefined state, such as when rebooting
	SUCCESS,   //Indicates the action terminated, accomplishing its goal.
	ABORTED,   //Means the action aborted pursuit of its goal of its own violation
	PREEMPTED  //Means the action terminated on command from a client
};

class WayPoint extends AgentTimeline {
	predicate Active {
		XPOS x;
		YPOS y;
		DEPTH depth;
		THRUST thrust;
	}
	
	predicate Inactive {
		ResultStatus status;
	}
	
	WayPoint(Mode _mode) {
		super(_mode);
	}
}

/**
 * Captures all state information published by the VCS. Updates occur every tick. While there is alot of
 * infomation we could add here, we stick to what is relevant for the agent and ignore all other details.
 */
class VehicleState extends AgentTimeline {

    predicate Holds{
		XPOS x;
		YPOS y;
		DEPTH depth;
    }
    
    VehicleState(Mode _mode){super(_mode);}
}


/**
 * Path resides in Executive Officer that converts the mission point given by the Captain
 * as a series of waypoints and driving the pilot iteratively to achieve those points. 
 *
 * Status: incomplete, at the moment, just simple path where mission points are passed to
 *         WayPoint behavior for execution. 
 */
class Path extends AgentTimeline {
	
	/**
	 * This predicate will bind the current location of the AUV on every tick
	 */
	predicate Inactive {
		XPOS x;
		YPOS y;
		DEPTH depth;
		ResultStatus status;
		
	}
	
	predicate Goto {
		XPOS x;
		YPOS y;		
		DEPTH depth;
		THRUST thrust;
		PRIORITY priority;
	}
	
	Path(Mode _mode){super(_mode,"Inactive");}
}

/**
 * A controller acts between WayPoint and Path timlines
 *
 */
class PathController extends AgentTimeline {
	predicate Holds {
		bool active;
		bool at_goal;
		bool finished;
	}
	
	PathController(Mode _mode){super(_mode,"Holds");}
}



