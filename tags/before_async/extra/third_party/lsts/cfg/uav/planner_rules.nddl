#include "TREX.nddl"
#include "uav/navigator.nddl"
#include "uav/platform.nddl"

Reference::At {
	met_by(Going g);
	g.latitude == latitude;
	g.longitude == longitude;
	g.z == z;
	g.speed == speed;
	g.radius == radius;
}

ControlMode::DUNE {
	contained_by(Navigator.Idle);
}

Navigator::At {
	float min_dist;
	min_dist == 3.0;
	
	contained_by(Reference.At arr);
		ll_distance(latitude, longitude, arr.latitude, arr.longitude) <= min_dist;
		z == arr.z;
		speed == arr.speed;
		radius == arr.radius;
}

Navigator::Going {
    sane_pos(latitude, longitude, z);		
    contained_by(ControlMode.TREX);
}

NavActions::DoGoing {
    contained_by(condition ControlMode.TREX c);
    c.start < start;	

    //contained_by(OperationalLimits.Limits limits);
    ends(condition Navigator.Going go);
    go.start <= start;
    
    //if (go.z > 0.0) {
	//go.z < limits.max_depth;
    //} else {
	//-1.0 * go.z < limits.max_altitude;
	//-1.0 * go.z > limits.min_altitude;
    //}
		
    meets(effect Navigator.At at);
    go.latitude == at.latitude;
    go.longitude == at.longitude;
    go.z == at.z;
    go.speed == at.speed;

    int my_start;
    my_start >= c.start;

    if( c.start<=AGENT_CLOCK ) {
	met_by(EstimatedState.Position origin);
	orig_lat == origin.latitude;
	orig_lon == origin.longitude;
	abs(origin.z-orig_z) < 5.0;
	
	// orig_z - 5.0 < origin.z < orig_z + 5.0;
	//orig_z + 5.0 > origin.z;
	
	my_start == max(origin.start, c.start);
    }

    if(  my_start<= AGENT_CLOCK ) {
	contains(condition Reference.Going g);

	go.latitude == g.latitude;
	go.longitude == g.longitude;
	go.z == g.z;
	go.speed == g.speed;
	g.radius == at.radius;
	concurrent(end, g.end);
    }
}
