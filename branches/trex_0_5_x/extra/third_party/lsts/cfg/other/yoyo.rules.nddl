#include "TREX.nddl"
#include "navigator.nddl"
#include "platform.nddl"

Reference::At {
	met_by(Going g);
	g.latitude == latitude;
	g.longitude == longitude;
	g.z == z;
	g.speed == speed;
}

ControlMode::DUNE {
	contained_by(Navigator.Idle);
}

Navigator::Going {

	met_by(Idle);

	contained_by(condition ControlMode.TREX c);
		c.start < start;	

	contained_by(condition OperationalLimits.Limits limits);
		if (z > 0.0) {
			z < limits.max_depth;
		}
		else {
			-1.0 * z < limits.max_altitude;
			-1.0 * z > limits.min_altitude;
		}
		sane_pos(latitude, longitude, z);		
		
	meets(effect At at);
		latitude == at.latitude;
		longitude == at.longitude;
		speed == at.speed;

	met_by(condition EstimatedState.Position origin);
		orig_lat == origin.latitude;
		orig_lon == origin.longitude;
		orig_z == origin.z;

	int my_start;
	my_start == max(origin.start, c.start);

	if(  my_start<= AGENT_CLOCK ) {
		contains(condition Reference.Going firstDescent);
		firstDescent.latitude == latitude;
		firstDescent.longitude == longitude;
		firstDescent.z == object.max_z;
		firstDescent.speed == speed;
	
	contains(condition ReferenceState.Going atDeepest);
		atDeepest.latitude == latitude;
		atDeepest.longitude == longitude;
		atDeepest.z == object.max_z;
		atDeepest.speed == speed;
		atDeepest.near_z == true;
	
	if (atDeepest.start <= AGENT_CLOCK) {
		contains(condition Reference.Going firstAscent);
			firstAscent.latitude == latitude;
			firstAscent.longitude == longitude;
			firstAscent.z == object.min_z;
			firstAscent.speed == speed;
	
		atDeepest meets firstAscent;
	
		concurrent(end, firstAscent.end);
		}
	}
	

	dist == ll_distance(orig_lat, orig_lon, latitude, longitude);
}
