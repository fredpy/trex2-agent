/*********************************************************************
 * Software License Agreement (BSD License)
 * 
 *  Copyright (c) 2011, MBARI.
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 * 
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the TREX Project nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
#include "Plasma.nddl"

/*
 * Some global constants fixed by TREX
 */ 
float TICK_DURATION;
int   MISSION_END;
int   AGENT_CLOCK;

enum Mode {
  External, // Synchronize observations and dispatch goals
  Observe,  // No goal dispatching 
  Internal, // Publish updates and accept goals
  Private,  // Not visible externally 
  Ignore    // Not used at all
}

class AgentTimeline extends Timeline {
  Mode   mode;
  string defaultPredicate;

  predicate undefined {};

  predicate Failed {};

  AgentTimeline(Mode _mode) {
    mode = _mode;
    defaultPredicate = "undefined";
  }
  
  AgentTimeline(Mode _mode, string _default) {
    mode = _mode;
    defaultPredicate = _default;
  }
}

// constraint checkExternal(test, obj) { test <: bool };


// constraint bind(var, defaultValue) {}
// constraint default(var, defaultValue) {}

// constraint bindMax(var, defaultValue) {}

// constraint defaultOnCommit(var, defaultValue) {}

