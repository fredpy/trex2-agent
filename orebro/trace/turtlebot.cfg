<?xml version="1.0"?>

<Agent name="TurtleBot">
  <!-- conveniently log the turtlebot.replay.cfg 
       even though it is not really used in this mission  -->
  <Use file="turtlebot.replay.cfg"/>
  

  <Plugin name="europa_pg">
    <!-- this a simple europa based reactor:
	 *general T_REX info*
	 - name: turtlebot
	 - can plan 20 ticks ahead
	 - should take up to 5 ticks to plan
	 *europa specific options*
	 - planning domain:                turtlebot.nddl
	 - planning solver config:         turtlebot.plan.xml
	 - synchronization solver config:  turtleot.synch.xml
	 - limited to a maximum depth of search of 15 during synchronization
	 - limited to a maximum of 50 search steps during synchronization
	 - will log all its plans under $TREX_LOG_DIR/latest/turtlebot/tick.*
    -->
    <EuropaReactor name="turtlebot" lookahead="20" latency="5"
		   model="turtlebot.nddl"
		   plan_cfg="turtlebot.delib.xml" 
		   synch_cfg="turtlebot.synch.xml" 
		   maxDepth = "15"
		   maxSteps = "50"
		   all_plans="1" />
  </Plugin>

  <Plugin name="ros_pg">
    <!-- Use a clock based on ROS clock API
	 millis: indicate the sduration of a tick in ms
    -->
    <ROSClock millis="1000" /> <!-- Let's run this guy at 1Hz -->

    <Plugin name="turtle_pg"/>
    <!-- A reactor defined on turtle_pg (or trex_orebro/src/fail_guard.cc
	 This reactor will exit trex when it receives a Failed observation
    -->
    <FailSafe name="guardian" latency="0" lookahead="0">
      <!-- Add any timeline you do not want to fail below -->
      
      <External name="move"/> <!-- Make sure that the owner of move
                                   (which is turlebot declared above)
                                   never dies -->
      <External name="velocity"/>
    </FailSafe>
    
    <!-- ROS reactor: allow to connect to  ROS topics
	 *general T_REX info*
	 - name: bot_api
	 - can "plan" 1 ticks ahead
	 - should take up to 1 tick to confirm that a topic has been sent
	 - verbose makes it more verbose in TREX.log
	 *ROS specific options*
	 - <Odometry ...> subscribe to a topic with Odometry message
	    - ROS topic: /odom
	    - T-REX timeline name: position
	    - merge: indicate that it will not try to collapse new messages
	             in a single observation even if the new message 
		     is the same as the previous one
	    - init: the reactor will block T-REX starts until it receive a 
	            first message on this topic
         - <Twist ...>
	    - ROS topic /mobile_base/commands/velocity
	    - T-REX timeline name: velocity
	    - control indicates that this timeline accept goals from 
	              other reactors 
    -->
    <ROSReactor name="bot_api" latency="1" lookahead="1" verbose="1">
      <Odometry ros_service="/odom" timeline="position" merge="0" init="1" />
      <Twist ros_service="/mobile_base/commands/velocity" timeline="velocity" control="1" />
      <!-- Add other ROS topic adapters as needed here -->
    </ROSReactor>
  </Plugin>

  <!-- A simple mission goal:
    move should be in GO state 
      - sometime fater tick 10
      - for at least 5 ticks and up to 15 ticks
      
      - angluar z speed should be 0
      - linear speed on x should  be in [0.3 1.0]
      - linear speed on y should be 0.0
   -->   
  <Goal on="move" pred="Go">
    <!-- start only after 10 seconds -->
    <Variable name="start"><int min="10"/></Variable>
    <Variable name="duration"><int min="5" max="15"/></Variable>

    <Variable name="angular_z"><float value="0"/></Variable>
    <Variable name="linear_x"><float min="0.3" max="1.0"/></Variable>
    <Variable name="linear_y"><float value="0"/></Variable>
  </Goal>

</Agent>