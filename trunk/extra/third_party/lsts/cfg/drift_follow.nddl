#include "TREX.nddl"
#include "path.nddl"
#include "navigator.nddl"
#include "lagrangian.nddl"
#include "drifter.nddl"

// The nine equi-distant points in a square of 1x1
LagrangianPoint upper_left  = new LagrangianPoint(-0.5, 0.5);
LagrangianPoint upper_mid   = new LagrangianPoint(0.0, 0.5);
LagrangianPoint upper_right = new LagrangianPoint(0.5, 0.5);
LagrangianPoint mid_left    = new LagrangianPoint(-0.5, 0.0);
LagrangianPoint center      = new LagrangianPoint(0.0, 0.0);
LagrangianPoint mid_right   = new LagrangianPoint(0.5, 0.0);
LagrangianPoint lower_left  = new LagrangianPoint(-0.5, -0.5);
LagrangianPoint lower_mid   = new LagrangianPoint(0.0, -0.5);
LagrangianPoint lower_right = new LagrangianPoint(0.5, -0.5);

/*
 * Define some basic paths
 */

// upward_transect : lower_mid -> upper_mid
PathList upward_transect = new PathList(upper_mid, lower_mid, nilPath);
// forth_and_back : ( lower_mid -> upper_mid ) -> lower_mid 
//                : upward_transect -> lower_midath
PathList forth_and_back = new PathList(lower_mid, upward_transect);

// upper_line : upper_left -> upper_right
PathList upper_line = new PathList(upper_right, upper_left, nilPath);
// square : (upper_left -> upper_right) -> lower_right -> lower_left -> upper_left
//        : upper_line -> lower_right -> lower_left -> upper_left
PathList square = new PathList(upper_left, lower_left, 
			       lower_right, upper_line);


/*
 * TREX timelines
 */
Navigator navigator = new Navigator(External, false);
VerticalControl vc = new VerticalControl(Internal);

// These 2 are meant to not be AgentTimeline
LagrangianSpace lagrange = new LagrangianSpace(Internal);
LagrangianPath path_control = new LagrangianPath(Internal);

DrifterFollow drifter = new DrifterFollow(Internal);

close();

rejectable(vc.Holds ctrl);
ctrl.speed == 1.5;
ctrl.pitch_angle == 0.5;
ctrl.min_z == 2.0;
ctrl.max_z == 25.0;


// rejectable(drifter.Survey survey);
// survey.path == square;
// survey.speed_north == 0.1;
// survey.speed_east == -0.05;
// survey.center_lat == to_rad(41.184195);
// survey.center_lon == to_rad(-8.705745);
// survey.size == 1000.0; // 1km
// survey.dynamic == true;
