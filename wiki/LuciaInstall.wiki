#summary Installation instructions for Lucia winter school 2013
#labels Phase-Deploy


= Introduction =

In order to install T-REX for the Lucia winter school you will need the following:
  * A ubuntu linux box 12.04 64 bits
  * administration rights in the box
  * ROS hydra installed

Additionally you will need europa_pso which is provided.
It is also recommended to have ccmake or cmake-gui installed as this documentation assume that you have at least ccmake (cmake-gui being just the more fancy version of it). To install 

For installing ccmake:
{{{ 
$ sudo apt-get install cmake-curses-gui 
}}}
Or for installing cmake-gui
{{{ 
$ sudo apt-get install cmake-qt-gui 
}}}

= Installing Europa =
 # check if your linux is 32 or 64 bits. You can do this by running :
     {{{
$ arch 
     }}}
    If it writes `x86_64` then your system is 64 bits, otherwise (`i386`) it is 32 bits
 # Download the [http://code.google.com/p/trex2-agent/downloads/detail?name=europa-ubuntu-12.10-64.tar.gz&can=2&q= 64 bits binary] or [https://code.google.com/p/europa-pso/downloads/detail?name=europa-2.6-linux.zip&can=2&q= 32 bits binary]
# Install antlr3c on ubuntu.
     {{{ 
$ sudo apt-get install libantlr3c-3.2.0 libantlr3c-dev 
    }}}
 # Unpack the europa archive
   * 64 bits: 
     {{{
$ cd ~/
$ tar zxvf europa-ubuntu-12.10-64.tar.gz
     }}}
   * 32 bits:
     {{{
$ cd ~/
$ unzip europa-2.6-linux.zip
$ mv europa-2 europa
     }}} 
After this you should have a ~/europa directory which include all the europa binaries and headers required for T-REX compilation.
  
= Installing T-REX =
 # Get the source of T-REX [http://code.google.com/p/trex2-agent/downloads/detail?name=trex-0.5.1.tar.gz&can=2&q= here]  
 # unpack the source 
    {{{
$ cd ~/
$ tar zxvf trex-0.5.1.tar.gz
    }}}
 # Set EUROPA_HOME to where europa was unpacked
   {{{
$ export EUROPA_HOME=~/europa
   }}}
 # Create build directory and run ccmake (alt.cmake-gui on it) with the source location as argument
    {{{ 
$ mkdir ~/trex.build
$ cd ~/trex.build
$ ccmake ~/trex-0.5.1 -DWITH_CPP11=ON
   }}}
*Note* the WITH_CPP11 option is required as ubuntu 12.xx uses a version of boost anterior to 1.47. Setting it up beforehand avoid to have the trex cmake scripts  display an error message.

At this point you should be facing an interface similar to this:
[https://trex2-agent.googlecode.com/svn/wiki/imgs/ccmake-init.png]

Hit the key 'c' (or the configure button on cmake-gui) to do the first configuration:
[https://trex2-agent.googlecode.com/svn/wiki/imgs/ccmake-first.png]

Then we can set up extra options:
  * set CMAKE_INSTALL_PREFIX to ~/trex (or whatever you want)
  * set WITH_ROS to ON

To set a field on ccmake navigate your cursor to the field (with up and down arrow) and hit enter in order to edit it. You should have the following:
[https://trex2-agent.googlecode.com/svn/wiki/imgs/ccmake-edit.png]

From there you can hit 'c' which will detect ROS. Then if no error occur you will hit 'c' again and should end up with no more fields prefixed by a `*` :
 
[https://trex2-agent.googlecode.com/svn/wiki/imgs/ccmake-final.png]

From there just hit 'g' which will generate your compilation environment for T-REX.

The only thing remaining is to compile and install T-REX
{{{
$ cd ~/trex.build
$ make 
}}}
After a while the compilation should complete without issue. You can then install T-REX:
{{{
$ make install
}}}
The final step is to set up[ your environment by adding the following line into your `~/.bashrc` file:
{{{
source ~/trex/share/trex/trex_init.bash
}}}
 
== T-REX extension for Lucia ==

 # Get the source through svn (may change before tuesday)
    {{{
$ svn co checkout http://trex2-agent.googlecode.com/svn/orebro ~/trex_orebro
    }}}
 # Create a build directory and run cmake as before  
    {{{
$ mkdir ~/trex_orebro.build
$ cd ~/trex_orebro.build
$ ccmake ~/trex_orebro
    }}}
The ccmake should go seamlessly if your trex environment is set and you have already installed go_turtle ros package (even without go_turlte this should just display a warning).
The only option I recommend is to set CMAKE_INSTALL_PREFIX to  the same value as fro trex (~/trex in this document)
The hit 'c' as required and 'g;' to generate the makefiles. Finally just compile :
   {{{
$ cd ~/trex_orebro.build
$ make 
$ make install
   }}}
== A simple test ==
You  are set and can do a simple test with a gazebo simulation (has instructed at [http://wiki.ros.org/turtlebot_simulator])
 # On one terminal start gazebo:
   {{{
$ roslaunch turtlebot_gazebo turtlebot_empty_world.launch   
   }}}
 # When the simulation is started  (i.e. you should axe a gazebo window with the robot). You can start a sample trex mission provided in trex_orebro:
   {{{
$ amc turtlebot &
   }}} 
 # This mission will make the robot move after 10 seconds trex is started for 15 seconds in one direction 
 # You can track the activity of TREX by looking at $TREX_LOG_DIR/latest/TREX.log. The command below will show you the content of the file as it is updated:
   {{{
$ tail -f $TREX_LOG_DIR/latest/TREX.log
   }}}
 # Finally you can shutdown the mission by killing trex:
   {{{
$ killall amc
   }}}
   and of course shutdown ROS simulation (hitting ^C on the window where sorlaunc is running should be enough)