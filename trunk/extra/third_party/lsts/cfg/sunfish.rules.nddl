#include "TREX.nddl"
#include "navigator.nddl"
#include "platform.nddl"


class YoYoController extends AgentTimeline {
	
	YoYoController(Mode _mode) {
		super(_mode, "Idle");
	}	
	
	predicate Idle {}
	
	predicate Done {
		float latitude, longitude, max_z, min_z, speed;
		int secs_underwater;
	}
	
	action Exec {
		float latitude, longitude, max_z, min_z, speed;
		int secs_underwater;
	}
}

YoYoController::Done {
	met_by(Exec exec);
		exec.latitude == latitude;
		exec.longitude == longitude;
		exec.speed == speed;
		exec.max_z == max_z;
		exec.min_z == min_z;
		exec.secs_underwater == secs_underwater;
	
	duration == 1;		
}

Navigator::At {
	float min_dist;
	min_dist == 3;
	
	contained_by(YoYoController.Done arr);
		arr.speed == speed;
		arr.latitude == latitude;
		arr.longitude == longitude;
		arr.min_z == object.min_z;
		arr.max_z == object.max_z;
		arr.secs_underwater == object.secs_underwater;
		ll_distance(latitude, longitude, arr.latitude, arr.longitude) <= min_dist;
}

Navigator::Going {

	contained_by(condition ControlMode.TREX c);
		c.start < start;	

	contained_by(condition OperationalLimits.Limits limits);
		if (z > 0.0) {
			z < limits.max_depth;
		}
		else {
			-1.0 * z < limits.max_altitude;
			-1.0 * z > limits.min_altitude;
		}
		sane_pos(latitude, longitude, z);		
		
	meets(effect At at);
		latitude == at.latitude;
		longitude == at.longitude;
		speed == at.speed;

	met_by(condition EstimatedState.Position origin);
		orig_lat == origin.latitude;
		orig_lon == origin.longitude;
		orig_z == origin.z;

	int my_start;
	my_start == max(origin.start, c.start);

	if(  my_start<= AGENT_CLOCK ) {
		contains(condition YoYoController.Exec g);

		latitude == g.latitude;
		longitude == g.longitude;
		g.max_z == object.max_z;
		g.min_z == object.min_z;
		speed == g.speed;
		g.secs_underwater == object.secs_underwater;
		concurrent(end, g.end);
	}
}