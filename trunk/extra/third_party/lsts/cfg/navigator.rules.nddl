#include "TREX.nddl"
#include "navigator.nddl"
#include "platform.nddl"

Navigator::At {

	contained_by(Reference.At arr);
		latitude == arr.latitude;
		longitude == arr.longitude;
		z == arr.z;
		speed == arr.speed;
	
	duration >= secs; 
}

Navigator::Going {

	contained_by(condition ControlMode.TREX c);
		
		
		// underwater navigation requires LBL or IMU sensors activated
		//if (z > 0) {
		//	contained_by(Payload.Active lbl_active);
		//	lbl_active.object.name == "lbl" || lbl_active.object.name == "imu";
		//}

	contained_by(condition OperationalLimits.Limits limits);
		if (z > 0.0) {
			z < limits.max_depth;
		}
		else {
			-1.0 * z < limits.max_altitude;
			-1.0 * z > limits.min_altitude;
		}
		//sane_pos(latitude, longitude, z);		
		
	meets(effect At at);
		latitude == at.latitude;
		longitude == at.longitude;
		z == at.z;
		speed == at.speed;

	met_by(condition EstimatedState.Position origin);
		orig_lat == origin.latitude;
		orig_lon == origin.longitude;
		orig_z == origin.z;

	int my_start;
	my_start == max(origin.start, c.start);

		/*
	if(  my_start<= AGENT_CLOCK ) {
		contains(condition Reference.Going g);
		latitude == g.latitude;
		longitude == g.longitude;
		z == g.z;
		speed == g.speed;
	}
		*/
	dist == ll_distance(orig_lat, orig_lon, latitude, longitude);			
    duration > ceil(dist * speed * 0.8); // 20% tolerance
	duration < floor(dist * speed * 1.2);
	
}