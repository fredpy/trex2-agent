<?xml version="1.0"?>

<Agent name="GoTurtle">

  <!-- No europa reactor for now but you wll have to implement one -->
  <Plugin name="europa_pg">
    <EuropaReactor name="turtlebot" lookahead="20" latency="5"
		   model="go_basic.nddl"
		   plan_cfg="turtlebot.delib.xml" 
		   synch_cfg="turtlebot.synch.xml" 
		   maxDepth = "15"
		   maxSteps = "50"
		   all_plans="1" />
  </Plugin>

  <Plugin name="ros_pg">
    <!-- Use a clock based on ROS clock API
	 millis: indicate the sduration of a tick in ms
    -->
    <ROSClock millis="1000" /> <!-- Let's run this guy at 1Hz -->

    <Plugin name="turtle_pg"/>    
    <!-- ROS reactor: allow to connect to  ROS topics
	 *general T_REX info*
	 - name: bot_api
	 - can "plan" 1 ticks ahead
	 - should take up to 1 tick to confirm that a topic has been sent
	 - verbose makes it more verbose in TREX.log
	 *ROS specific options*
	 - <Odometry ...> subscribe to a topic with Odometry message
	    - ROS topic: /odom
	    - T-REX timeline name: position
	    - merge: indicate that it will not try to collapse new messages
	             in a single observation even if the new message 
		     is the same as the previous one
	    - init: the reactor will block T-REX starts until it receive a 
	            first message on this topic
         - <Twist ...>
	    - ROS topic /mobile_base/commands/velocity
	    - T-REX timeline name: velocity
	    - control indicates that this timeline accept goals from 
	              other reactors 
    -->
    <ROSReactor name="bot_api" latency="1" lookahead="1" verbose="1">
      <!-- Topics from go_turtle T-REX binding defined in trex_orebro/src/nav_adapter.cc -->
      <PoseWithCovarianceStamped ros_service="amcl_pose"
				 timeline="pose"
				 merge="0" init="1" /> <!-- position in the map -->
      <GoTurtleAction ros_service="/move_action" timeline="go_action" control="1" /> <!-- command to make robot move -->
      <String ros_service="action_feedback" timeline="go_state" /> <!-- state of the command above -->
      <!-- Add other ROS topic adapters as needed here -->
    </ROSReactor>
  </Plugin>

  <!-- A simple mission goal:
       Do the action go_action.Hold to go to (0,0) and rotate twice:
       - action id is 2 (go to a point and roate twice)
       - x is 0.0
       - y is 0.0
       - start after tick 2 
       - timeout is 120 seconds
  -->   
  <Goal on="go_action" pred="Hold">
    <!-- start only after 10 seconds -->
    <Variable name="start"><int min="2"/></Variable>

    <Variable name="action"><int value="2"/></Variable>
    <Variable name="x"><float value="0"/></Variable>
    <Variable name="y"><float value="0"/></Variable>
    <Variable name="timeout"><float max="120"/></Variable>
  </Goal>

</Agent>