#include "TREX.nddl"

enum Location {Ship, Waypoint1, Waypoint2, Surface}; //Waypoint3, Waypoint4, Waypoint5, Waypoint6, Waypoint7, Waypoint8, Waypoint9, Waypoint10};

enum Survey {Vent1, Vent2};

class SurveyLocation {
  Location location;
  Survey objective;

  SurveyLocation(Location _location, Survey _objective){
    location = _location;
    objective = _objective;
  }
}

class Path {
   Location from;
   Location to;
   float time;
   
   Path(Location _from, Location _to, float _time){
     from = _from;
     to = _to;
     time = _time;
   }
}

// Use built-in Timeline functionality to enforce that an agent:
// a) Can't be at more than one place at a time.
// b) Can't Go more than one place at a time.
// c) Can't Go somewhere and be At somewhere at the same time.
class AUVLocation extends AgentTimeline{

  AUVLocation(Mode _mode){
    super(_mode);
  }

  predicate At {
    Location loc;
  }

  predicate Go {
    Location from;
    Location to;
  }
}

class Effects {
  Effects(){}

  predicate BatteryDown{}

  predicate NavigationOn{}
  
  predicate InstrumentsOn{}

}

// In addition to a timeline, the agent can buy things.  Note that Buy can
// (must, in fact) be simultaneous with an At token and the Buy predicate
// therefore cannot be defined as part of the AgentTimeline.
class AUV extends AgentTimeline {

  AUV(Mode _mode) {
    super(_mode, true);
  }

  action Go {
    Location from;
    Location to;
  }

  action Survey {
    Survey objective;
  }
  
  predicate Sample{
    Survey objective;
  }

}

// Define the rules for AgentLocation

AUVLocation::At {
  met_by(Go prevGo);
  eq(loc, prevGo.to);
  meets(Go nextGo);
  eq(loc, nextGo.from);

}

AUVLocation::Go {
  met_by(At originToken);
  meets(At destinationToken);

  Path paths;
  eq(originToken.loc, paths.from);
  eq(destinationToken.loc, paths.to);

  eq(from, paths.from);
  eq(to, paths.to);

  duration >= paths.time;

}

// Define the rules for Agent

AUV::Go {
  met_by(condition AUVLocation.At origin);
  eq(from, origin.loc);

  equals(condition AUVLocation.Go going);
  eq(going.from, from);
  eq(going.to, to);

  meets(effect AUVLocation.At destination);
  eq(to, destination.loc);

  //before(effect Effects.BatteryDown);

}

AUV::Survey {

  // initialized to all locations
  SurveyLocation possiblelocations;

  eq(objective, possiblelocations.objective);

  contained_by(condition AUVLocation.At currLocation);
  eq(currLocation.loc, possiblelocations.location);
  
  meets(effect Sample sample);
  eq(sample.objective, objective);

  // A survey takes 10 time units
  eq(10, duration);

  //before(effect Effects.BatteryDown down);
}

AUV::Sample {
  SurveyLocation possiblelocations;
  eq(objective, possiblelocations.objective);

  contained_by(condition AUVLocation.At currLocation);
  eq(currLocation.loc, possiblelocations.location);

  //eq(1, duration);
}
