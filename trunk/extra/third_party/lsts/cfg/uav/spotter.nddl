class SpotterFollow;

/** Subjacent controller for spotter following surveys
 *
 * this class embeds all the actions and intermediate predicates
 * used by the reactor in order to transform a high level Survey
 * goal from SpotterFollow agent timeline into simple Navigation 
 * waypoints (At)
 */
class SpotterController {
    // The SpotterFollow timeline which created this instance
    SpotterFollow command;

    /* High level survey action 
     *
     * effect: complete the survey
     * condition: reach the final waypoint of the survey path
     *
     * set up the survey and create the last waypoint which trigger 
     * planning of the rest of the survey path
     */
    action EndSurvey {}

    /* survey segment iteration
     *
     * effect reach a waypoint of the path
     * condition reach previous waypoint of the path
     *
     * this action unroll the path up to the initial waypoint
     */
    action DoSegment {
		int count; // number of the segment
		count > 0;
		float flyTimeF;
    }

    /* go to initial waypoint
     *
     * effect    reach the first waypoint
     * condition Navigation is At the location of our waypoint
     * 
     * this action allow to go to the initial waypoint of our survey
     */
    action DoInitial {}

    /* A waypoint
     *
     * This prediciate is used as intermediate information for the 
     * waypoints to be done during a survey. It is created and manipulated 
     * by the actions of this class for the planner to keep track of the 
     * waypoints it will have to reach and their sequence.
     */
    predicate Waypoint {
		int path_id;          // identifier of the survey
		int wp_num;           // waypoint number
		float lat, lon;       // resulting waypoint location
		float completion_date;  // when did this waypoint was reached
						      // by Navigation. This is used as
						      // information to send only one At at
						      // time and avoid to overflow Navigation
						      // with all the waypoints at once
		duration == 1;
		completion_date <= start;
		wp_num > 0; 
		float radius;
    }

    SpotterController(SpotterFollow cmd) {
	  command = cmd;
    }
}

/* A counter/id generator
 *
 * This timeline is used to generate unique ids for Surveys
 * it increments a counter every time a new token is created resulting on 
 * an unique id which is used by SpotterFollow timeline
 */
class Counter extends Timeline {

    predicate Holds {
		int id;
		0 <= id;
		id <= start;
    }

    Counter() {}
}

/* High level spotter follow class
 *
 * This class is the main interface of the spotter follow reactor. 
 * It allows to transform Survey goals received on a full survey 
 * execution.
 */
class SpotterFollow extends AgentTimeline {
    SpotterController controller;
    Counter           counter;

    predicate Inactive {}

    predicate DoSurvey {
		int id;
		int waypoints;
		float    size, z;
		float center_lat, center_lon;
		waypoints == 3;
    }
    predicate Survey {
		float    center_lat, center_lon;
		float z;
		duration==1;
    }

    SpotterFollow(Mode _mode) {
		super(_mode, "Inactive");
		controller = new SpotterController(this);
		counter = new Counter();
    }
}

Counter::Holds {
    if( start<=0 ) {
	    id == 0;
    } else {
		met_by(Holds prev);
		id == prev.id + 1;
    }
}

SpotterFollow::Inactive {
    Counter cpt = object.counter;
    starts(cpt.Holds cur);
}

SpotterFollow::DoSurvey {
    Counter cpt = object.counter;
    contained_by(cpt.Holds cur);
    id == cur.id;
}

SpotterController::EndSurvey {
    SpotterFollow me = object.command;
    Counter cpt = me.counter;

    equals(effect me.Survey survey); //origin.start == target.start && origin.end == target.end && origin.duration == target.duration
    ends(cpt.Holds cur);             //origin.end == target.end
    met_by(me.DoSurvey exec);        //origin.start == target.end
      exec.id == cur.id;
      exec.center_lat == survey.center_lat;
      exec.center_lon == survey.center_lon;
      exec.z == survey.z;
   
    equals(condition Waypoint last_wp);
      last_wp.path_id == cur.id;
      last_wp.wp_num == exec.waypoints;
}

SpotterController::Waypoint {
    SpotterFollow me = object.command;
    Counter cpt = me.counter;
    contained_by(cpt.Holds count);
      path_id == count.id;
}

SpotterController::DoSegment {
    SpotterFollow me = object.command;
    Counter cpt = me.counter;
    float radiusF;
    before(effect Waypoint to); //DoSegment.end == Waypoint.start
      to.wp_num == count + 1;
      to.radius == (count + 2 )  * -50;
      floor(radiusF) == to.radius;
      flyTimeF * 20.0  == (2.0 * 3.14 * abs(radiusF));

      // These lines allow to convert flyTimeF (seconds) into its tick equivalent
      // As a result this model will run fine event if the clock runs at a 
      // tick rate whihc is no 1Hz
      float flyTimeInTick;
      flyTimeInTick * TICK_DURATION == flyTimeF;

      to.start >= end + floor(flyTimeInTick * 1.1);  // since Waypoint is a command it will be dispatched as early as possible, if it desn't happen it is flexible to do it a few ticks later
  
    contained_by(me.DoSurvey exec);
      exec.id == to.path_id;
      exec.waypoints > count;
      
      /* 
	 both  starts  and starts_during are messing with the DoSurvey above 
	 because europa still tries to start this token strictly before the 
	 last Waypoint ends. 
	 starts_during shouldn't but apprently europa do not agree with me
	 starts_during(condition Waypoint from); // correction for error that was propagated down the line
      */
      // The alternate solution say that it is met_by :
      // by doing so we have the classic Waypoint meets DoSegment meets Waypoint
      // which will only work if all the waypoints are not identical and take
      // at least 1 tick to go from one to the other. 
      met_by(condition Waypoint from); //origin.start == target.end
      
      from.path_id == to.path_id;
      from.lat == to.lat;
      from.lon == to.lon;
      from.wp_num == count;
      from.completion_date <= to.completion_date;
 

    // Finally send the next At when the previous one did complete
    if( from.completion_date <= AGENT_CLOCK ) {
		// I will assume that from are to are far enough to require a waypoint
		meets(condition Navigator.At dest); //DoSegment.end == Navigator.At.start
		dest.latitude == to.lat;
		dest.longitude == to.lon;
		dest.secs == 0;
		dest.radius == (count + 2 )  * -50;
		dest.z == exec.z;
        //to.completion_date == dest.start + 6.28*to.radius*20.0;
	    //to.completion_date == dest.start;
	    //to.completion_date == dest.start + 100; //erase the reactor
   }
}

SpotterController::DoInitial {
    SpotterFollow me = object.command;
    Counter cpt = me.counter;

    equals(effect Waypoint to);
      to.wp_num == 1; // This is the first waypoint
      to.radius == -100;
    meets(me.DoSurvey exec); // Relaxing the constraints on DoSurvey
      exec.id == to.path_id;
      exec.center_lat == to.lat;
      exec.center_lon == to.lon;

    // Check that I can start 
    contained_by(cpt.Holds cur);
    if( cur.start<= AGENT_CLOCK ) {
		contained_by(condition Navigator.At dest);//using starts gives the 'constraintConsistent() is false' exception, so I'm going with relaxing the DoSurvey further
		dest.latitude == to.lat;
		dest.longitude == to.lon;
		dest.secs == 0;
		dest.radius == -100;
		to.completion_date == dest.start;
		dest.z == exec.z;
    }
    
}

