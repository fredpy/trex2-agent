#include "TREX.nddl"

class Battery;
class Instrument;
class InstrumentState;
class Location;
class Navigator;
class Path;
class Rover;

class Rover
{
	Navigator navigator;   //Keeps track of Rover's position
	Instrument instrument; //Keeps track of Instrment's state
	Battery mainBattery;   //Provides power

	Rover(Battery b, Mode _mode)
	{
		navigator = new Navigator(_mode);
		instrument = new Instrument(this, _mode);
		mainBattery = b;
	}

	action Go { Location dest; }

	action TakeSample { Location rock; }

	action PhoneHome{}    //Communicate material back to earth
	action PhoneLanger{}  //Communicate material back to lander
}

class Battery extends Reservoir
{
	string profileType;

	Battery(float ic, float ll_min, float ll_max)
	{
		super(ic,ll_min,ll_max);
		profileType="IncrementalFlowProfile";
	}
}

// A point on the plant's surface. We assume a Euclidean Plan.
class Location
{
	string name;
	int x;
	int y;

	Location(string _name, int _x, int _y)
	{
		name = _name;
		x = _x;
		y = _y;
	}
}

// Path between pairs of locations.
// Includes cost in battery power for a rover to transverse the path.
class Path 
{
	string name;
	Location from;
	Location to;
	float cost;

	Path(string _name, Location _from, Location _to, float _cost)
	{
		name = _name;
		from = _from;
		to = _to;
		cost = _cost;
	}
}

class Navigator extends AgentTimeline
{
	predicate At { Location location; }

	// Rover may be going between two locations.
	predicate Going { 
		Path path;
		Location from;
		Location to;
		neq(from, to); //Prevents rover from going from and to the same place.
	}

	Navigator(Mode _mode)
	{
		super(_mode);
	}
}

// Managemen of the rover's instrements.
class InstrumentLocation extends AgentTimeline
{
	predicate Stowed{}
	predicate Stowing{}
	predicate Unstowed{}
	predicate Unstowing{}
	InstrumentLocation(Mode _mode)
	{
		super(_mode);
	}
}

class InstrumentState extends AgentTimeline
{
	predicate Placed {Location rock;}
	predicate Sampling {Location rock;}
	predicate Free {}
	InstrumentState(Mode _mode)
	{
		super(_mode);
	}
}

class Instrument
{
	Rover rover;
	InstrumentLocation location;
	InstrumentState state;

	Instrument(Rover r, Mode _mode)
	{
		rover = r;
		location = new InstrumentLocation(_mode);
		state = new InstrumentState(_mode);
	}

	action TakeSample
	{
		Location rock;
		eq(10, duration); //Duration of TakeSample is 10 time units
	}

	action Place
	{
		Location rock;
		eq(2, duration); //Duration of place is 2 time units
	}

	action Stow
	{
		eq(2,duration); //Duration of stow is 2 time units
	}

	action Unstow
	{
		eq(2,duration); //Duration of Unstow is 2 time units
	}
}

Rover::Go
{
	// Instrument must be stowed while driving
	contained_by(condition object.instrument.location.Stowed);
	
	met_by(condition object.navigator.At _from);
	meets(effect object.navigator.At _to);
	eq(_to.locatino, dest);

	// Find a path
	Path path;

	// The path used must be between the 2 points
	eq(path.from, _from.location);
	eq(path.to, dest);

	equals(effect object.navigator.Going going);
	eq(going.path, path);
	eq(going.from, _from.location);
	eq(going.to, dest);

	// Pull power from the battery equal to the path cost.
	start(effect Battery.consume tx);
	eq(tx.quantity, path.cost);
}

Rover::TakeSample
{
	// Rover must be at the target rock throughout
	contained_by(condition object.navigator.At at);
	eq(at.location, rock);

	equals(object.instrument.TakeSample ts);
	eq(tx.rock, rock);

	// Make contact with results. Prefer to phone home, but
	// also allow conact to lander instead as a relay
	bool OR;
	
	if(OR == false) {
		meets(object.PhoneHome t0);
	}
	if(OR == true) 	{
		meets(object.PhoneLander t1);
	}
}

Rover::PhoneHome
{
	starts(object.mainBattery.consume tx);
	eq(tx.quantity, 300); // consume battery power
}

Rover::PhoneLander
{
	starts(object.mainBattery.consume tx);
	eq(tx.quantity, 20); // consume battery power
}

// Take Sample = PositionOnRock + Sample
Instrument::TakeSample
{
	met_by(condition object.state.Placed on);
	eq(on.rock, rock);

	contained_by(condition object.state.Sampling sample);
	
	equals(effect object.state.Sampling sample);
	eq(sample.rock, rock);

	starts(effect object.rover.mainBattery.consume tx);
	eq(tx.quntity, 120); // consume battery power
}

Instrument::Place
{
	contained_by(condition object.location.Unstowed);
	
	meets(effect object.state.Placed on);
	eq(on.rock,rock);

	starts(effect object.rover.mainBattery.consume tx);
	eq(tx.quantity, 20); // consume battery power
}

Instrument::Stow
{
	met_by(condition object.location.Unstowed);
	equals(effect object.location.Stowing);
	meets(effect object.location.Stowed);

	starts(effect object.rover.mainBattery.consume tx);
	eq(tx.quantity, 20) // consume battery power
}

Instrument::Unstow
{
	met_by(condition object.location.Stowed);
	equals(effect object.location.Unstowing);
	meets(effect object.location.Unstowed);
	
  	starts(effect object.rover.mainBattery.consume tx);
  	eq(tx.quantity, 20); // consume battery power		
}


